横向越权:攻击者尝试访问与他拥有相同权限的用户资源
        user 修改密码
纵向越权:低级别攻击者尝试访问高级别的用户资源

递归查询分类节点及所有子节点id        controller/backend/categoryManageController/getChildrenAndDeepChildrenCategory

FTP服务对接
Spring MVC文件上传 MultiPartResolver
流读取properties配置文件  (InputStream)


pojo   bo   vo对象之间的转换关系及解决思路
joda-time快速入门  (String 和 date之间的变换)
类加载顺序
    父类静态变量 静态块 -----> 子类静态变量 静态块 ----->父类普通变量 普通初始化块  构造方法 ---
            --> 子类普通变量 普通初始化块 构造方法
Mybatis-pageHelper 高效准确动态排序及动态排序
Mybatis对List集合遍历实现方法 （foreach标签）
  where语句动态拼装 (where标签)



购物车
如何封装一个高复用的购物车核心方法(限制购物车库存数量,计算总价,封装购物车中产品的vo )
解决浮点型在商业运算中丢失精度的问题  （使用BigDecimal(String)构造方法）



收货地址管理
Spring MVC数据绑定中 对象绑定
mybatis自动生成主键     配置和使用
标签中配置 useGenerateKeys="true" keyProperty="字段名"
巩固如何避免横向越权



支付模块开发
支付宝对接
支付回调
查询支付状态

目标:熟悉支付宝对接的核心文档,调通支付宝支付功能官网demo
    解析支付宝SDK对接源码
    RSA1和RSA2验证签名及加密解密
    避免支付宝重复通知和数据校验
    生成二维码,并持久化到图片服务器
    支付宝回调

    对接时两个技巧:natapp外网穿透和 tomcat remote debug(tomcat远程调试)



重要官方文档:
    (1)沙箱登录 (2)沙箱环境使用说明 (3)如何使用沙箱环境 (4)当面付产品介绍(对接的就是支付宝的当面付)
    (5)扫码支付接入指引 (6)当面付快速接入  (7)当面付接入必读  (8)当面付进阶功能(使用红包、优惠券、返现、打折等)
    (9)当面付的异步通知-仅用于扫码支付 (10)当面付的官方SDK和Demo  (11)服务端的SDK (12)生成RSA秘钥
    (13)线上创建的应用说明(包含申请线上运行的支治的流程等等)

沙箱调试环境(买家账号测试,商家账号测试)

支付宝扫码支付的主业务流程
    收银员(生成订单)--->商家收银台(发起预下单请求)<--->(返回二维码信息)商家后台(请求预下单)<--->(返回二维码信息)支付宝后台
                              |                                                                     |
                       展示二维|码信息                                                                 |
                              |                                                     (返回支付结果信息) |
                           支付宝钱包扫码--------------------------------------------------------------|
支付宝扫码支付流程

支付宝扫码支付重要的字段
    关键入参:out_trade_no     商户订单号,保证不重复
            total_amount    订单金额
            subject         订单标题
            store_id        商户门店编号
            timeout_express 交易超时时间

    关键出参:qr_code            订单二维码图片地址


    trade_status交易状态:   WAIT_BUYER_KEY交易创建,等待卖家付款
        receipt_amount实收金额  invoice_amount开票金额
    buyer_pay_amount付款金额    point_amount集分宝金额

支付宝扫码支付的重要细节
    回调的验证
    过滤掉重复的通知
    一定要验证并确保可接受的异步通知是支付宝发出的
    回调请求的返回

支付宝扫码支付的对接技巧 (用在和外网联调等都很有用)
        回调的调试方法
            路由器设置开放本地开放到外网(不推荐)

        外网远程debug
            保持远端代码版本和本地代码保持一致
            及时关闭开放的debug端口 (不推荐)

        内网穿透(ngrok natapp 花生壳等等888)
支付宝扫码支付官方 demo 调试   (调通后将demo嵌入到项目中)


主动轮询和回调通知的区别

避免单边账

同步请求的加签和验证签名

设计实用、安全、扩展性强大的常量、枚举类
订单号生成规则、订单的严谨性判断
pojo和vo的实际操练
MyBatis批量插入








云服务器配置  域名申请备案配置    原配置     线上环境    linux使用shell写自动化发布脚本    线上验证






































==========================================二期=======================================================

Lombok(通过简单的注解来精简代码达到消除代码冗长的目的)

介绍及优点
    提高编码效率 使代码更简洁  消除冗长代码   避免修改字段明白时忘记修改方法名
    注意: IDE必须要支持Lombok,否则报错

原理
    支持了JSR 269 Pluggable Annotation Processing API
    javac 从java6 支持了JSR 269 API规范
    即只要程序实现了该API,就能在javac运行的时候得到调用
    Lombok实现了JSR 269规范在编译时 javac编译源码的具体流程如下:

        Source File(源代码)-----Parse(javac分析)------AST(抽象语法树)------Annotation Processing

        Annotation Processing包含了Lombok Annotation Processor(会对生成的抽象语法树进行处理)
        为Lombok Annotation Handler(找到包含Lombok注解的类,通过注解修改该语法树)------对生成的抽象语法树
        进行解析和生成就会生成字节码文件

如何引入项目
    可以通过Maven引入Lombok
安装LomBok插件

反编译大法

Lombok验证

Lombok工作中注意项



                                                Maven
============================================================================================================

mvn clean package -Dmaven.test.skip=true    maven清理 打包 跳过单元测试
mvn clean pacakge -Dmaven.test.skip=true -Pdev    Maven环境隔离编译打包命令 (参数 -P${环境标识} )


二期所有的session请求全部放在一个redis分布式的session server中
并且需要利用分布式redis做一个分布式锁解决多个tomcat在同一时间点启动定时任务的问题(暂时不考虑对数据和逻辑造成的问题)


tomcat集群带来的新问题:
Session 登录信息存储及读取问题,
    可以使用nginx ip hash policy解决 ,可以不改变现有的技术架构,直接实现横向扩展
    根据ip将请求分配到指定的服务器
    缺点:(1)导致负载均衡不平均(因为完全依赖ip hash的结果)   (2)在ip变化的情况下(用户动态ip)无法访问
服务器定时任务并发的问题

时间戳 1970 1 1到当前时间的毫秒数






===================================================================================================
                                    Redis分布式
===================================================================================================




redis分布式算法原理

    (1)传统分布式算法
        设有一图片test.jpg, 同时也有三台服务器分别为0 , 1 , 2
        此时对 test.jpg 进行 hash :hash(test.jpg) 然后用此散列值对 3 取模
        hash(test.jpg) % 3   (结果值只可能为 0 (则存在0的服务节点), 1(则存在1 的服务节点) , 2 (同理))

        此时假设有4个redis节点:redis0, redis1, redis2, redis3
        20个数据 (1 ~ 20 )  假设这20个数据都是 经过hash后的散列值
        因为有4个redis节点  所以此时20个数据分别对4取模,  可得如下结果

        redis0:      4   8   12  16  20
        redis1:      1   5   9   13  17
        redis2:      2   6   10  14  18
        redis3:      3   7   11  15  19

        此时再假设要对redis节点进行 增加 或者 删除 (此例增加节点,变为5个)     变为如下结果
        redis0:     5   10  15  20
        redis1:     1   6   11  16
        redis2:     2   7   12  17
        redis3:     3   8   13  18
        redis4:     4   9   14  19

        可以发现数据 (1, 2, 3, 20)在增加节点后存储的服务器没有变化    即只有这四个数据还可以获得访问
        即在redis0 服务器中 只有数据 20依然可以命中
        即在redis1 服务器中 只有数据 1依然可以命中
        即在redis2 服务器中 只有数据 2依然可以命中
        即在redis3 服务器中 只有数据 23依然可以命中
        得出命中率为  4 / 20 = 20%



    (2)Consistent hashing 一致性算法原理
        首先理解一个环形hssh空间,通常 hash算法都是将value应设在一个32位的key值当中
        此时将这个32位的 key 首尾相连变成一个环形        此key值的取值范围不难理解为 0 ~  2E32-1
        此时再将对象映射到此环形hash空间上   考虑四个对象 object1 ~ object4
        通过hash函数计算出这四个对象的hash值 key   这四个key值都可以落在环形hash空间上
        接下来将 cache 映射到hash空间上
            基本思想就是讲对象和cache都映射到同一个hash数值空间中,并且使用相同的hash算法
            hash(cacheA) = keyA
            hash(cacheB) = keyB
            hash(cacheC) = keyC
            此时cache和对象已经经过相同的hash算法被映射到一个环形hash空间上
            此时考虑 如何将对象映射到cache上
            我们可以设置让环形空间上的对象顺时针发现的第一个cache节点进行映射
            这样可以保证在增加和删除节点时对数据的影响变小
            (新增节点(只会影响新增节点和逆时针第一个节点之间的数据),
             删除节点(只会影响被删除节点和逆时针第一个节点之间的数据))


    (3)hash 倾斜性
        经过Consistent hashing算法后理想情况下不错,但是可能经过hash算法之后 (假设有三个cache节点)
        这三个cache节点可能距离非常近   则其中一个节点服务器压力会很大  而其他两个节点基本感觉不到压力
        这就是由于 hash 倾斜性导致的


    (4)虚拟节点
        解决hash倾斜性带来的问题
        此时假设有两个对象object1, object2 对这两个对象分别进行hash
        有虚拟节点 v1 ~ v6
        假设经过hash之后 object1落在了v2这个虚拟节点上面
                       object2落在了v5这个虚拟节点上面
        此时对虚拟节点进行rehash  即再次取一次hash
        假设此时v1,v2落在了真实节点N1上 , v3, v4落在了真实节点N2上,  v5, v6落在了真实节点上N3上
        即通过虚拟节点把真实节点进行一个放大  (此时object1存在了N1上, object2存在了N3上)


    (5)Consistent hashing 命中率
        公式: (1 - n/(n + m)) * 100%      n:服务器台数   m:新增的服务器台数

redis分布式环境配置
    启动两个不同端口的redis

redis分布式客户端及服务端启动
    修改redis.windows.conf文件  指定端口  启动
封装分布式 Shared Redis API
    见com.mmall.common.RedisShardedPool
Redis分布式环境验证
    RedisShardedPool  中main 方法
集群和分布式概念详解






==================================================================================================
                                         单点登录
==================================================================================================
Spring Session实现单点登录

(1)Spring Session简介
    Spring Session是Spring的项目之一
    Spring Session提供了一套创建和管理Servlet  HttpSession的方案
    Spring Session提供了集群Session(Clustered Sessions)功能
    默认采用外置的Redis来存储Session数据,以此来解决Session共享问题

(2)Spring Session官方地址文档源码
    源码: github.com/spring-projects/spring-session
         Spring Session 1.2.x官方demo

(3)Spring Session项目集成


(4)Redis Desktop Manager介绍及使用

(5)Spring Session源码解析
    DelegatingFilterProxy

    DefaultCookieSerializer

    SessionRepositoryFilter

    RedisOperationSessionRepository

    AbstractHttpSessionApplicationInitializer

    SessionRepositoryRequestWrapper

    SessionRepositoryResponseWrapper

    CookieHttpSessionStrategy






    ================================   Spring Schedule  ==========================================

    Spring Schedule
        用作作业调度,如定时任务(jdk原生提供了Timer,Task等类进行处理定时任务)

    Spring Schedule Cron表达式
        Cron表达式格式：秒分时日月周年(可选)
                Seconds, Minutes, Hours, Day-of-Month, Month,     Day-of-Week,        Year(可选字段)
        允许的值: 0-59      0-59    0-23    1-31    1-12或Jan-Dec    1-7或SUN-SAT     空值或者1970-2099
    允许的特殊字符: ,-*/     同       同      同和?LWC      同           ?LC#                   同
    Spring Schedule Cron生成器

    Spring Schedule配置

    MySQL表锁 行锁

        先使用FOR UPDATE 悲观锁

        SELECT ... FOR UPDATE(悲观锁)
        需要使用InnoDB引擎
        Row-Level Lock(明确的主键)       会产生行锁
        Table-Level Lock(无明确的主键)   会产生表锁



        例mmall_product表,有id 和 name, 其中id为主键

      Case1:
        明确指定主键,并且有结果集,Row-Level Lock
        SELECT * FROM mmall_product WHERE id = '666' FOR UPDATE;
        id是明确的主键,并且在mmall_product表中有这个666的数据则会产生行锁


      Case2:
        明确指定主键,并且无结果集,无Lock
        SELECT * FROM mmall_product WHERE id = '-100' FOR UPDATE;
        id是明确的主键,但是在mmall_product表中没有-100的这条数据,则不会上锁

      Case3:
        无主键Table-Level Lock
        SELECT * FROM mmall_product WHERE name = 'iphone' FOR UPDATE;
        未明确指定主键, 会产生表锁

      Case4:有主键但是主键不明确
        SELECT * FROM mmall_product WHERE id != '66' FOR UPDATE;
        虽然有主键但是主键不明确,会产生表锁
        SELECT * FROM mmall_product WHERE id LIKE '%66%' FOR UPDATE;
        依然是虽然有主键但是主键不明确,依然会产生表锁




